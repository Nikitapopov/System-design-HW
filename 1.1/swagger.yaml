openapi: 3.0.3
info:
  title: Swagger Taxi
  version: 1.0.0
paths:
  /trip/route:
    post:
      tags:
        - taxi
      summary: Calculate time and price of trip
      description: Calculate time and price of trip
      operationId: calculateTripConditions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripRequirements'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripConditions'
  /trip/order:
    post:
      tags:
        - taxi
      summary: Order the taxi
      description: Order the taxi
      operationId: orderTaxi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderingTrip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The trip ID
  /driver/{id}:
    get:
      tags:
        - taxi
      summary: Get information about driver
      description: Get information about driver
      operationId: getDriver
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the driver to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
  /client/{id}:
    get:
      tags:
        - taxi
      summary: Get information about client
      description: Get information about client
      operationId: getClient
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the client to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /drivers/workload-status:
    get:
      tags:
        - taxi
      summary: Get workload status of drivers
      description: Get workload status of drivers
      operationId: getWorkloadStatus
      parameters:
        - in: query
          name: area
          schema:
            type: string
          required: true
          description: Area where drivers are being searched
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriversWorkloadStatus'
  /trip/history/{id}:
    get:
      tags:
        - taxi
      summary: Get trip history of client
      description: Get trip history of client
      operationId: getClientTripHistory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the client to get
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date
          required: false
          description: Date after which the search is conducted
        - in: query
          name: dateTo
          schema:
            type: string
            format: date
          required: false
          description: Date before which the search is conducted
        - in: query
          name: offset
          schema:
            type: integer
          required: false
          description: Offset for pagination
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit for pagination
        - in: query
          name: sortOrder
          schema:
            type: array
            items:
              type: string
              enum: [ASC, DESC]
          required: false
          description: Order of sorting
        - in: query
          name: sortBy
          schema:
            type: array
            items:
              type: string
          required: false
          description: Fields of sorting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientTripHistory'
  /trip/review/{trip_id}:
    post:
      tags:
        - taxi
      summary: Leave a review about the trip
      description: Leave a review about the trip
      operationId: addTripReview
      parameters:
        - in: path
          name: trip_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the trip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripReviewBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The trip review ID
  /user/{id}:
    put:
      tags:
        - taxi
      summary: Update user
      description: Update user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserBody'
      responses:
        '200':
          description: OK

components:
  schemas:
    TripRequirements:
      type: object
      required: [stops, tariff]
      properties:
        stops:
          type: array
          description: Start, intermediate stops and finish spot
          items:
            type: string
            minLength: 2
            maxLength: 10
        tariff:
          type: number
          enum: [0,1,2,3,4]
    TripCondition:
      type: object
      required: [trip_condition_id, time, price, route, tariff]
      properties:
        # Price is reserved, so  maybe it is necessary to keep it some time
        trip_condition_id:
          type: number
          description: ID of trip conditions
        time:
          type: number
          description: Time in minutes
        price:
          type: number
          description: Price in rubles
        route:
          type: array
          description: Route by one-dimensional coordinates
          items:
            type: number
        tariff:
          type: number
          enum: [0,1,2,3,4]
    TripConditions:
      type: array
      items:
        $ref: '#/components/schemas/TripCondition'
    OrderingTrip:
      type: object
      required: [trip_condition_id]
      properties:
        trip_condition_id:
          type: integer
          description: ID of trip conditions
    Driver:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        photo:
          type: string
          description: URL to photo
        rate:
          type: number
    Client:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        photo:
          type: string
          description: URL to photo
        rate:
          type: number
    DriversWorkloadStatus:
      type: object
      properties:
        traffic_level:
          type: integer
        percentageOfAvailableDrivers:
          type: number
    ClientTripHistory:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ClientTrip'
        page:
          type: integer
        count:
          type: integer
        total:
          type: integer
    ClientTrip:
      type: object
      properties:
        trip_id:
          type: integer
        driver_id:
          type: integer
        stops:
          type: array
          items:
            type: string
        tariff:
          type: integer
          enum: [0,1,2,3,4]
        price:
          type: number
    TripReviewBody:
      type: object
      required: [rate, comment]
      properties:
        rate:
          type: number
        comment:
          type: string
    UpdateUserBody:
      type: object
      required: [name, photo, phone]
      properties:
        name:
          type: string
        photo:
          type: string
          description: URL to photo
        phone:
          type: string
  